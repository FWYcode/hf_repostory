spring:
  thymeleaf:
    prefix: classpath:/
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/db1?serverTimezone=GMT%2B8
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    type: com.alibaba.druid.pool.DruidDataSource
    password: 123
#    initialSize: 1
#    minIdle: 3
#    maxActive: 20
#    # 配置获取连接等待超时的时间
#    maxWait: 60000
#    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#    timeBetweenEvictionRunsMillis: 60000
#    # 配置一个连接在池中最小生存的时间，单位是毫秒
#    minEvictableIdleTimeMillis: 30000
#    validationQuery: select 'x'
#    testWhileIdle: true
#    testOnBorrow: false
#    testOnReturn: false
#    # 打开PSCache，并且指定每个连接上PSCache的大小
#    poolPreparedStatements: true
#    maxPoolPreparedStatementPerConnectionSize: 20
#    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
#    filters: stat,wall,log4j
#    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
#    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
#    # 合并多个DruidDataSource的监控数据
#    #useGlobalDataSourceStat: true
  jpa:
    database: mysql
    show-sql: true
  redis:
    cluster:
      nodes: 192.168.154.128:6379,192.168.154.130:6379,192.168.154.131:6379,192.168.154.132:6379,192.168.154.133:6379,192.168.154.134:6379
      max-redirects: 3
    database: 0
    lettuce:
      pool:
       max-active: 1000  # 连接池最大连接数
       max-idle: 10      # 连接池最大空闲连接
       min-idle: 5       # 连接池最小空闲连接
       max-wait: -1ms
  mvc:
    static-path-pattern: "/**"
  resources:
    static-locations: ["classpath:/META-INF/resources", "classpath:/resources","classpath:/static", "classpath:/public",]
pagehelper:
  helper-dialect: mysql
  params: count=countSql
  reasonable: true
  supportMethodsArguments: true
mapper:
  identity: mysql
  not-empty: true
  enum-as-simple-type: true
mybatis:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
server:
  port: 8080
  address: 192.168.0.38
#cas:
#  filter:
#    url:
#      pattern: /cas
#  server:
#    url:
#      prefix: http://192.168.0.100:8080/cas
#  login:
#    url: ${cas.server.url.prefix}/login
#  logout:
#    uri: ${cas.server.url.prefix}/logout
#shiro:
#  server:
#    url:
#      prefix: http://${server.address}:${server.port}
#login:
#  url: ${cas.login.url}?service=${shiro.server.url.prefix}${cas.filter.url.pattern}
#  success:
#    url: /test
#unauthorized:
#    url: /error/403
#logout:
#  url: ${cas.login.url}?${shiro.server.url.prefix}${cas.filter.url.pattern}


